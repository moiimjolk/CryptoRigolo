from hashlib import blake2b
from copy import deepcopy

#je suis à moitié satisfaite de cette version, elle fonctionne de manière approximative 
#il peut arriver que quelques caractères soient remplacés et que le texte soit légèrement tronqué
#ces problèmes se manifestent normalement sur des entrées assez longues


def organize(text):
    src = open(text, encoding='utf-8')
    big_list = [[[]]]
    blank = ord(' ')
    for carac in src.read():
        if len(big_list[len(big_list)-1]) == 4 and  len(big_list[len(big_list)-1][len(big_list[len(big_list)-1])-1]) == 4 :
            num = ord(carac)
            big_list.append([[f"0x{num:02x}"]])
        elif len(big_list[len(big_list)-1][len(big_list[len(big_list)-1])-1]) == 4 :
            num = ord(carac)
            big_list[len(big_list)-1].append([f"0x{num:02x}"])
        else:
            num = ord(carac)
            big_list[len(big_list)-1][len(big_list[len(big_list)-1])-1].append(f"0x{num:02x}")

    for j in range(4 - len(big_list[len(big_list)-1][len(big_list[len(big_list)-1])-1])):   #to fill the last list
        if len(big_list[len(big_list)-1][len(big_list[len(big_list)-1])-1]) == 4 :
            big_list[len(big_list)-1].append([f"0x{blank:02x}"])
        else:
            big_list[len(big_list)-1][len(big_list[len(big_list)-1])-1].append(f"0x{blank:02x}")

    for i in range(4 - len(big_list[len(big_list)-1])): #to fill the last block
        big_list[len(big_list)-1].append([f"0x{blank:02x}" for j in range(4)])
    
    src.close()
    return deepcopy(big_list)



def initialize_block():
    block = []
    for i in range(4):
        row = []
        for j in range(4):
            row.append('0x00')
        block.append(row)
    return deepcopy(block)

def get_indexes(number):
    string_number = number[2:4]   #to avoid python to convert number to decimal when gived in argument
    indexes = []
    for i in range(2):
        if string_number[i] == "a" :
            indexes.append(10)
        elif string_number[i] == "b" :
            indexes.append(11)
        elif string_number[i] == "c" :
            indexes.append(12)
        elif string_number[i] == "d" :
            indexes.append(13)
        elif string_number[i] == "e" :
            indexes.append(14)
        elif string_number[i] == "f" :
            indexes.append(15)
        else : 
            indexes.append(int(string_number[i]))
    return deepcopy(indexes)


def reverse_string(string):
    res = ""
    for i in range(len(string)-1, -1, -1):
        res += string[i]
    return res

def hexstring_to_int(string):   #python is considering hex numbers in a list as strings
    res = 0
    string = reverse_string(string)
    for i in range(len(string)):
        if string[i] == "a" :
            mult = 10
        elif string[i] == "b" :
            mult = 11
        elif string[i] == "c" :
            mult = 12
        elif string[i] == "d" :
            mult = 13
        elif string[i] == "e" :
            mult = 14
        elif string[i] == "f" :
            mult = 15
        else : 
            mult = int(string[i])
        res+= mult*(16**i)
    return res


def add_round_key(block, key):
    new_block = initialize_block()
    for i in range(4):
        for j in range(4) :
            num =  hexstring_to_int(block[i][j][2:4]) ^ hexstring_to_int(key[i][j][2:4]) 
            new_block[i][j] = f"0x{num:02x}"  #^ is xor in python
    return deepcopy(new_block)


def sub_bytes(block):
    new_block = initialize_block()
    s_box = [
    [0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76],
    [0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0],
    [0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15],
    [0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75],
    [0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84],
    [0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf],
    [0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8],
    [0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2],
    [0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73],
    [0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb],
    [0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79],
    [0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08],
    [0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a],
    [0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e],
    [0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf],
    [0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16]
]
    for i in range(4):
        for j in range(4):
            place_to_search = get_indexes(block[i][j])
            num = s_box[place_to_search[0]][place_to_search[1]]
            new_block[i][j] =  f"0x{num:02x}"
    return deepcopy(new_block)

def inv_sub_bytes(block):
    new_block = initialize_block()
    s_box = [
    [0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38, 0xbf, 0x40, 0xa3, 0x9e, 0x81, 0xf3, 0xd7, 0xfb],
    [0x7c, 0xe3, 0x39, 0x82, 0x9b, 0x2f, 0xff, 0x87, 0x34, 0x8e, 0x43, 0x44, 0xc4, 0xde, 0xe9, 0xcb],
    [0x54, 0x7b, 0x94, 0x32, 0xa6, 0xc2, 0x23, 0x3d, 0xee, 0x4c, 0x95, 0x0b, 0x42, 0xfa, 0xc3, 0x4e],
    [0x08, 0x2e, 0xa1, 0x66, 0x28, 0xd9, 0x24, 0xb2, 0x76, 0x5b, 0xa2, 0x49, 0x6d, 0x8b, 0xd1, 0x25],
    [0x72, 0xf8, 0xf6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xd4, 0xa4, 0x5c, 0xcc, 0x5d, 0x65, 0xb6, 0x92],
    [0x6c, 0x70, 0x48, 0x50, 0xfd, 0xed, 0xb9, 0xda, 0x5e, 0x15, 0x46, 0x57, 0xa7, 0x8d, 0x9d, 0x84],
    [0x90, 0xd8, 0xab, 0x00, 0x8c, 0xbc, 0xd3, 0x0a, 0xf7, 0xe4, 0x58, 0x05, 0xb8, 0xb3, 0x45, 0x06],
    [0xd0, 0x2c, 0x1e, 0x8f, 0xca, 0x3f, 0x0f, 0x02, 0xc1, 0xaf, 0xbd, 0x03, 0x01, 0x13, 0x8a, 0x6b],
    [0x3a, 0x91, 0x11, 0x41, 0x4f, 0x67, 0xdc, 0xea, 0x97, 0xf2, 0xcf, 0xce, 0xf0, 0xb4, 0xe6, 0x73],
    [0x96, 0xac, 0x74, 0x22, 0xe7, 0xad, 0x35, 0x85, 0xe2, 0xf9, 0x37, 0xe8, 0x1c, 0x75, 0xdf, 0x6e],
    [0x47, 0xf1, 0x1a, 0x71, 0x1d, 0x29, 0xc5, 0x89, 0x6f, 0xb7, 0x62, 0x0e, 0xaa, 0x18, 0xbe, 0x1b],
    [0xfc, 0x56, 0x3e, 0x4b, 0xc6, 0xd2, 0x79, 0x20, 0x9a, 0xdb, 0xc0, 0xfe, 0x78, 0xcd, 0x5a, 0xf4],
    [0x1f, 0xdd, 0xa8, 0x33, 0x88, 0x07, 0xc7, 0x31, 0xb1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xec, 0x5f],
    [0x60, 0x51, 0x7f, 0xa9, 0x19, 0xb5, 0x4a, 0x0d, 0x2d, 0xe5, 0x7a, 0x9f, 0x93, 0xc9, 0x9c, 0xef],
    [0xa0, 0xe0, 0x3b, 0x4d, 0xae, 0x2a, 0xf5, 0xb0, 0xc8, 0xeb, 0xbb, 0x3c, 0x83, 0x53, 0x99, 0x61],
    [0x17, 0x2b, 0x04, 0x7e, 0xba, 0x77, 0xd6, 0x26, 0xe1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0c, 0x7d]
]
    for i in range(4):
        for j in range(4):
            place_to_search = get_indexes(block[i][j])
            num = s_box[place_to_search[0]][place_to_search[1]]
            new_block[i][j] =  f"0x{num:02x}"
    return deepcopy(new_block)


def sub_bytes_column(column):
    res = []
    s_box = [
    [0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38, 0xbf, 0x40, 0xa3, 0x9e, 0x81, 0xf3, 0xd7, 0xfb],
    [0x7c, 0xe3, 0x39, 0x82, 0x9b, 0x2f, 0xff, 0x87, 0x34, 0x8e, 0x43, 0x44, 0xc4, 0xde, 0xe9, 0xcb],
    [0x54, 0x7b, 0x94, 0x32, 0xa6, 0xc2, 0x23, 0x3d, 0xee, 0x4c, 0x95, 0x0b, 0x42, 0xfa, 0xc3, 0x4e],
    [0x08, 0x2e, 0xa1, 0x66, 0x28, 0xd9, 0x24, 0xb2, 0x76, 0x5b, 0xa2, 0x49, 0x6d, 0x8b, 0xd1, 0x25],
    [0x72, 0xf8, 0xf6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xd4, 0xa4, 0x5c, 0xcc, 0x5d, 0x65, 0xb6, 0x92],
    [0x6c, 0x70, 0x48, 0x50, 0xfd, 0xed, 0xb9, 0xda, 0x5e, 0x15, 0x46, 0x57, 0xa7, 0x8d, 0x9d, 0x84],
    [0x90, 0xd8, 0xab, 0x00, 0x8c, 0xbc, 0xd3, 0x0a, 0xf7, 0xe4, 0x58, 0x05, 0xb8, 0xb3, 0x45, 0x06],
    [0xd0, 0x2c, 0x1e, 0x8f, 0xca, 0x3f, 0x0f, 0x02, 0xc1, 0xaf, 0xbd, 0x03, 0x01, 0x13, 0x8a, 0x6b],
    [0x3a, 0x91, 0x11, 0x41, 0x4f, 0x67, 0xdc, 0xea, 0x97, 0xf2, 0xcf, 0xce, 0xf0, 0xb4, 0xe6, 0x73],
    [0x96, 0xac, 0x74, 0x22, 0xe7, 0xad, 0x35, 0x85, 0xe2, 0xf9, 0x37, 0xe8, 0x1c, 0x75, 0xdf, 0x6e],
    [0x47, 0xf1, 0x1a, 0x71, 0x1d, 0x29, 0xc5, 0x89, 0x6f, 0xb7, 0x62, 0x0e, 0xaa, 0x18, 0xbe, 0x1b],
    [0xfc, 0x56, 0x3e, 0x4b, 0xc6, 0xd2, 0x79, 0x20, 0x9a, 0xdb, 0xc0, 0xfe, 0x78, 0xcd, 0x5a, 0xf4],
    [0x1f, 0xdd, 0xa8, 0x33, 0x88, 0x07, 0xc7, 0x31, 0xb1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xec, 0x5f],
    [0x60, 0x51, 0x7f, 0xa9, 0x19, 0xb5, 0x4a, 0x0d, 0x2d, 0xe5, 0x7a, 0x9f, 0x93, 0xc9, 0x9c, 0xef],
    [0xa0, 0xe0, 0x3b, 0x4d, 0xae, 0x2a, 0xf5, 0xb0, 0xc8, 0xeb, 0xbb, 0x3c, 0x83, 0x53, 0x99, 0x61],
    [0x17, 0x2b, 0x04, 0x7e, 0xba, 0x77, 0xd6, 0x26, 0xe1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0c, 0x7d]
]
    for i in range(4):
        place_to_search = get_indexes(column[i])
        num = s_box[place_to_search[0]][place_to_search[1]]
        res.append( f"0x{num:02x}")
    return deepcopy(res)


def inv_sub_bytes_column(column):
    res = []
    s_box = [
    [0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76],
    [0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0],
    [0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15],
    [0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75],
    [0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84],
    [0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf],
    [0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8],
    [0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2],
    [0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73],
    [0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb],
    [0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79],
    [0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08],
    [0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a],
    [0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e],
    [0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf],
    [0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16]
]
    for i in range(4):
        place_to_search = get_indexes(column[i])
        num = s_box[place_to_search[0]][place_to_search[1]]
        res.append( f"0x{num:02x}")
    return deepcopy(res)

def shift_rows(block):
    new_block = []
    for i in range(4) :
        current_row = block[i]
        for j in range(i):
            current_elt = current_row.pop(0)
            current_row.append(current_elt)
        new_block.append(current_row)
    return deepcopy(new_block)

def inv_shift_rows(block):
    new_block = []
    for i in range(4) :
        current_row = block[i]
        for j in range(i):
            current_elt = current_row.pop(len(current_row)-1)
            current_row.insert(0, current_elt)
        new_block.append(current_row)
    return deepcopy(new_block)

def multiply(x, y): #to define multiplication modulo a GF polynom 
    result = 0
    for i in range(y):
        if y & 1: 
            result ^= x 
        carry = y & 0x80  
        x <<= 1  
        if carry:
            y ^= 0x1b  
        x >>= 1
    return result



def mix_columns(block):
    new_block= initialize_block()
    matrix = [[2, 3, 1, 1],
            [1, 2, 3, 1],
            [1, 1, 2, 3],
            [3, 1, 1, 2]]
    for i in range(4):
        for j in range(4):
            sum = 0
            for k in range(4):
                if sum==0:
                    sum= multiply(hexstring_to_int(block[i][k][2:4]), matrix[k][j])
                else:
                    sum^= multiply(hexstring_to_int(block[i][k][2:4]), matrix[k][j])
            new_block[i][j] =f"0x{sum:02x}"
    return deepcopy(new_block)


def inv_mix_columns(block):
    new_block= initialize_block()
    matrix = [[14, 11, 13, 9],
            [9, 14, 11, 13],
            [13, 9, 14, 11],
            [11, 13, 9, 14]]
    for i in range(4):
        for j in range(4):
            sum = 0
            for k in range(4):
                if sum==0:
                    sum=multiply(hexstring_to_int(block[i][k][2:4]), matrix[k][j])
                else:
                    sum^= multiply(hexstring_to_int(block[i][k][2:4]), matrix[k][j])
            new_block[i][j] =f"0x{sum:02x}"
    return deepcopy(new_block)




def crypt(block,key_list) : 
    block = add_round_key(block, key_list[0])
    for i in range(1, 10):
        block = sub_bytes(block)
        block = shift_rows(block)
        block = mix_columns(block)
        block = add_round_key(block, key_list[i])
    block = sub_bytes(block)
    block = shift_rows(block)
    block = add_round_key(block, key_list[len(key_list)-1])
    return deepcopy(block)


def decrypt(block, key_list):
    block=add_round_key(block, key_list[len(key_list)-1])
    block=inv_shift_rows(block)
    block=inv_sub_bytes(block)
    for i in range(len(key_list)-2, 0, -1):
        block=add_round_key(block, key_list[i])
        block=inv_mix_columns(block)
        block=inv_shift_rows(block)
        block=inv_sub_bytes(block)
    block=add_round_key(block, key_list[0])
    return deepcopy(block)

def generate_key(keyword):
    key_in_a_list =  initialize_block()
    key = blake2b(key= keyword.encode('utf-8'),digest_size=16).hexdigest()

    index_counter = 0
    for i in range(4):
        for j in range(4):
            key_in_a_list[i][j] = '0x' + key[index_counter:index_counter+2]
            index_counter+= 2
    return deepcopy(key_in_a_list)

def get_keys_list(key):

    keys_list = [key]
    rcon = [
    [1, 0, 0, 0],
    [2, 0, 0, 0],
    [4, 0, 0, 0],
    [8, 0, 0, 0],
    [16, 0, 0, 0],
    [32, 0, 0, 0],
    [64, 0, 0, 0],
    [128, 0, 0, 0],
    [27, 0, 0, 0],
    [54, 0, 0, 0]
    ]
    for i in range(10):
        length=len(keys_list)
        list_of_columns = []
        first_column = []
        current_column= []
        for j in range(4):  #intitialization
            first_column.append(keys_list[length-1][j][0])
            current_column.append(keys_list[length-1][j][3])
        current_column.append(current_column.pop(0))    #rotword
        current_column = sub_bytes_column(current_column)
        for j in range(4):
            current_elt = hexstring_to_int(first_column[j][2:4]) ^ hexstring_to_int(current_column[j][2:4]) ^ rcon[i][j]
            current_column[j]=f"0x{current_elt:02x}"
        list_of_columns.append(deepcopy(current_column))
        for j in range(1,4):    #processing the 3 others columns
            for k in range(4):
                elt = keys_list[length-1][k][j]
                current_elt = hexstring_to_int(elt[2:4]) ^ hexstring_to_int(current_column[k][2:4])
                current_column[k]=f"0x{current_elt:02x}"
            list_of_columns.append(deepcopy(current_column))
        current_key=[]
        current_key=initialize_block()
        for j in range(4):
            for k in range(4):
                current_key[k][j]=list_of_columns[j][k]
        keys_list.append(current_key)
    return deepcopy(keys_list)
    
    
def crypt_all(text, keyword, target,function):
    res = open(target, "w", encoding='utf-8')
    key=generate_key(keyword)
    blocks = organize(text)
    crypted_blocks=[]
    for block in blocks : 
        
        crypted_blocks.append(function(block, deepcopy(get_keys_list(key))))

    for block in crypted_blocks :
        for row in block :
            for code in row:
                res.write(chr(hexstring_to_int(code[2:4])) )
    res.close()
    return deepcopy(key)


        

#ça c'est un bloc de test tout prêt que je vais laisser là
key = [["0x2b", "0x28", "0xab", "0x09"],
       ["0x7e", "0xae", "0xf7", "0xcf"],
       ["0x15", "0xd2", "0x15", "0x4f"],
       ["0x16", "0xa6","0x88", "0x3c"]]


#et ça ce sont les appels pour mes fichiers de test à moi
#crypt_all("test.txt", "vivelinfo", "test_crypte.txt", crypt)
#crypt_all("test_crypte.txt", "vivelinfo", "test_decrypte.txt", decrypt)